type Query {
    credit(id: ID, pageNumber: Int!, pageSize: Int!, filter: CreditFilter): [Credit]
}

type Credit {
    id: ID
    initialAmount: Float
    takingDate: String
    percent: Int
    creditPeriod: Int
    monthAmount: Float
    creditStatus: CreditStatus
    userId: ID
    creditTariff: CreditTariff
    payments(page: Int!, limit: Int!): [Payment]
    balances: [Balance]
    penalties: [Penalty]
}

type CreditTariff {
    id: ID
    type: String
    upToAmount: Float
    upToCreditDuration: Int
    creditPercent: Int
    creditRequests: [CreditRequest]
    credits: [Credit]
}

type CreditRequest {
    id: ID
    creditTariff: CreditTariff
    creditAmount: Float
    creditDuration: String
    userId: ID
    createdAt: String
}

type Payment {
    id: ID
    amount: Float
    commissionAmount: Float
    createdAt: String
    credit: Credit
}

type Balance {
    id: ID
    credit: Credit
    remainingDebt: Float
    accruedByPercent: Float
    createdAt: String
}

type Penalty {
    id: ID
    credit: Credit
    type: PenaltyType
    amount: Float
    status: PenaltyStatus
}

    enum CreditStatus {
    CREATE
    OPEN
    CLOSE
}

enum PenaltyType {
    MAIN_DEBT_REMAIN
    FIX
    PENNY
}

enum PenaltyStatus {
    PAID
    NOT_PAID
}

input CreditFilter {
    status: CreditStatus
}